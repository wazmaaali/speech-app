{"version":3,"sources":["getStyledFromProps.ts"],"names":["getStyledFromProps","styledSystemProps","theme","currentBreakpoint","styleFromProps","responsiveStyles","orderedBreakPoints","Object","entries","breakpoints","sort","a","b","key","rawValue","config","propConfig","value","Array","isArray","forEach","v","i","newStyle","push","k"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEO,MAAMA,kBAAkB,GAAG,CAChCC,iBADgC,EAEhCC,KAFgC,EAGhCC,iBAHgC,KAI7B;AACH,MAAIC,cAAmB,GAAG,EAA1B;AACA,MAAIC,gBAGH,GAAG,IAHJ;AAIA,QAAMC,kBAAkB,GAAGC,MAAM,CAACC,OAAP,CACzBN,KAAK,CAACO,WADmB,EAEzBC,IAFyB,CAEpB,CAACC,CAAD,EAAIC,CAAJ,KAAUD,CAAC,CAAC,CAAD,CAAD,GAAOC,CAAC,CAAC,CAAD,CAFE,CAA3B;;AAGA,OAAK,MAAMC,GAAX,IAAkBZ,iBAAlB,EAAqC;AACnC,UAAMa,QAAQ,GAAGb,iBAAiB,CAACY,GAAD,CAAlC;AAEA,UAAME,MAAM,GAAGC,yBAAWH,GAAX,CAAf;;AAEA,QAAI,qCAAyBC,QAAzB,EAAmCZ,KAAK,CAACO,WAAzC,CAAJ,EAA2D;AACzD,UAAI,CAACJ,gBAAL,EAAuBA,gBAAgB,GAAG,EAAnB;AAEvB,YAAMY,KAAK,GAAGH,QAAd;;AACA,UAAII,KAAK,CAACC,OAAN,CAAcF,KAAd,CAAJ,EAA0B;AACxBA,QAAAA,KAAK,CAACG,OAAN,CAAc,CAACC,CAAD,EAAIC,CAAJ,KAAU;AACtB;AACA,cAAI,CAACjB,gBAAgB,CAACC,kBAAkB,CAACgB,CAAD,CAAlB,CAAsB,CAAtB,CAAD,CAArB,EAAiD;AAC/C;AACAjB,YAAAA,gBAAgB,CAACC,kBAAkB,CAACgB,CAAD,CAAlB,CAAsB,CAAtB,CAAD,CAAhB,GAA6C,EAA7C;AACD;;AACD,gBAAMC,QAAQ,GAAG,kDAAsB;AACrCR,YAAAA,MADqC;AAErCE,YAAAA,KAAK,EAAEI,CAF8B;AAGrCR,YAAAA,GAHqC;AAIrCZ,YAAAA,iBAJqC;AAKrCC,YAAAA,KALqC;AAMrCC,YAAAA;AANqC,WAAtB,CAAjB,CANsB,CActB;;AACAE,UAAAA,gBAAgB,CAACC,kBAAkB,CAACgB,CAAD,CAAlB,CAAsB,CAAtB,CAAD,CAAhB,CAA2CE,IAA3C,CAAgDD,QAAhD;AACD,SAhBD;AAiBD,OAlBD,MAkBO;AACL,aAAK,MAAME,CAAX,IAAgBR,KAAhB,EAAuB;AACrB,gBAAMM,QAAQ,GAAG,kDAAsB;AACrCR,YAAAA,MADqC;AAErCE,YAAAA,KAAK,EAAEA,KAAK,CAACQ,CAAD,CAFyB;AAGrCZ,YAAAA,GAHqC;AAIrCZ,YAAAA,iBAJqC;AAKrCC,YAAAA,KALqC;AAMrCC,YAAAA;AANqC,WAAtB,CAAjB;;AAQA,cAAI,CAACE,gBAAgB,CAACoB,CAAD,CAArB,EAA0B;AACxBpB,YAAAA,gBAAgB,CAACoB,CAAD,CAAhB,GAAsB,EAAtB;AACD;;AACDpB,UAAAA,gBAAgB,CAACoB,CAAD,CAAhB,CAAoBD,IAApB,CAAyBD,QAAzB;AACD;AACF;AACF,KAtCD,MAsCO;AACL,YAAMN,KAAK,GAAGH,QAAd;AACA,YAAMS,QAAQ,GAAG,kDAAsB;AACrCR,QAAAA,MADqC;AAErCE,QAAAA,KAFqC;AAGrCJ,QAAAA,GAHqC;AAIrCZ,QAAAA,iBAJqC;AAKrCC,QAAAA,KALqC;AAMrCC,QAAAA;AANqC,OAAtB,CAAjB;AASAC,MAAAA,cAAc,GAAG,EACf,GAAGA,cADY;AAEf,WAAGmB;AAFY,OAAjB;AAID;AACF;;AAED,SAAO;AAAEnB,IAAAA,cAAF;AAAkBC,IAAAA;AAAlB,GAAP;AACD,CA3EM","sourcesContent":["import { propConfig } from '../theme/styled-system';\nimport { hasValidBreakpointFormat } from '../theme/tools';\nimport { getRNKeyAndStyleValue } from './getRNKeyAndStyleValue';\nimport type { ITheme } from '../theme';\n/**\n * Common Logic Sharing between useSx and useStyledSytem\n * @param styledSystemProps\n * @param theme\n * @param currentBreakpoint\n * @returns styleFromProps, responsiveStyles\n */\n\nexport const getStyledFromProps = (\n  styledSystemProps: any,\n  theme: any,\n  currentBreakpoint: any\n) => {\n  let styleFromProps: any = {};\n  let responsiveStyles: null | Record<\n    keyof typeof theme.breakpoints,\n    Array<any>\n  > = null;\n  const orderedBreakPoints = Object.entries(\n    theme.breakpoints as ITheme['breakpoints']\n  ).sort((a, b) => a[1] - b[1]);\n  for (const key in styledSystemProps) {\n    const rawValue = styledSystemProps[key];\n\n    const config = propConfig[key as keyof typeof propConfig];\n\n    if (hasValidBreakpointFormat(rawValue, theme.breakpoints)) {\n      if (!responsiveStyles) responsiveStyles = {};\n\n      const value = rawValue;\n      if (Array.isArray(value)) {\n        value.forEach((v, i) => {\n          //@ts-ignore\n          if (!responsiveStyles[orderedBreakPoints[i][0]]) {\n            //@ts-ignore\n            responsiveStyles[orderedBreakPoints[i][0]] = [];\n          }\n          const newStyle = getRNKeyAndStyleValue({\n            config,\n            value: v,\n            key,\n            styledSystemProps,\n            theme,\n            currentBreakpoint,\n          });\n          //@ts-ignore\n          responsiveStyles[orderedBreakPoints[i][0]].push(newStyle);\n        });\n      } else {\n        for (const k in value) {\n          const newStyle = getRNKeyAndStyleValue({\n            config,\n            value: value[k],\n            key,\n            styledSystemProps,\n            theme,\n            currentBreakpoint,\n          });\n          if (!responsiveStyles[k]) {\n            responsiveStyles[k] = [];\n          }\n          responsiveStyles[k].push(newStyle);\n        }\n      }\n    } else {\n      const value = rawValue;\n      const newStyle = getRNKeyAndStyleValue({\n        config,\n        value,\n        key,\n        styledSystemProps,\n        theme,\n        currentBreakpoint,\n      });\n\n      styleFromProps = {\n        ...styleFromProps,\n        ...newStyle,\n      };\n    }\n  }\n\n  return { styleFromProps, responsiveStyles };\n};\n"]}